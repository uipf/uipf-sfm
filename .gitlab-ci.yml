before_script:
  - sudo apt-get -y install build-essential cmake pkg-config libboost-serialization-dev libboost-program-options-dev libboost-filesystem-dev libboost-graph-dev libopencv-dev qtbase5-dev qtbase5-dev-tools libglibmm-2.4-dev

stages:
  - prepare
  - build
  - test
  - deploy


# download uipf
find-uipf:
  stage: prepare
  script:
#    - 'curl -fsSL -H "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" https://gitlab.cebe.cc/global/gitlab-ci-helpers/raw/master/get-last-successful-build-artifact.sh'
#    - '. <(curl -fsSL -H "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" https://gitlab.cebe.cc/global/gitlab-ci-helpers/raw/master/get-last-successful-build-artifact.sh)'
#    - PROJECT=master/uipf PRIVATE_TOKEN=privtoken STAGE=build-uipf-with-cv download_latest
    - rsync -a /tmp/uipf-prefix/ prefix/
    - find prefix/ |sort
  artifacts:
    paths:
    - prefix/


build-uipf-sfm:
  stage: build
  script:
    - if [ -d build/ ]; then rm -rf build/ ; fi
    - mkdir build/ && cd build/
    - cmake -DCMAKE_INSTALL_PREFIX=`pwd`/../prefix ..
    - make -j 4
  dependencies:
    - find-uipf
  artifacts:
    paths:
    - prefix/

test:
  stage: test
  script:
    # make sure libs can be found
    - export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:`pwd`/prefix/lib"
    - ./prefix/bin/uipf -l
    # TODO grep for expected modules
  dependencies:
  - build-uipf-sfm

deploy:
  stage: deploy
  script:
    # temporary solution for sharing uipf artifacts
    - rm -rf /tmp/uipf-sfm-prefix
    - rsync -a prefix/ /tmp/uipf-sfm-prefix
    - find /tmp/uipf-sfm-prefix |sort
  dependencies:
    - build-uipf-sfm


variables:
  GIT_STRATEGY: clone
