#ifndef SFM_MODULES_KEYPOINTLIST_HPP
#define SFM_MODULES_KEYPOINTLIST_HPP

#include <uipf/data.hpp>
#include <uipf/exceptions.hpp>
#include <uipf/logging.hpp>
#include <uipf/util.hpp>
#include <opencv2/opencv.hpp>

#include <istream>
#include <ostream>

namespace uipfsfm {
	namespace data {

		UIPF_DATA_TYPE_BEGIN (KeyPointList, "cebe.sfm.data.keypointlist", std::vector<cv::KeyPoint>)

		public:
			// TODO free descriptor memory in destructor
			std::vector<cv::Mat*> descriptors;

			std::vector<cv::Point2f> getSimplePoints();

			void print(bool verbose = false);

			virtual bool isSerializable() const { return true; };

			// Reads a file in the format generated by loewe sift binary
			KeyPointList(std::istream& s);

			virtual void serialize(std::ostream& s) const;;


		UIPF_DATA_TYPE_END
	}
}


#endif //SFM_MODULES_KEYPOINTLIST_HPP
